services:
  web:
    build: .
    volumes:
      - .:/app
    environment:
      - FLASK_APP=src.app
      - FLASK_ENV=development
      - FLASK_RUN_HOST=0.0.0.0
      - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}
      - SQLALCHEMY_DATABASE_URI_ASYNC=${SQLALCHEMY_DATABASE_URI_ASYNC}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "7012:7012"
    expose:
      - 7012
    networks:
      - app_network
    depends_on:
      database:
        condition: service_healthy
        restart: true

  database:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app_network

  celery_worker:
    build: .
    volumes:
      - .:/app
    command:
      - celery
      - -A
      - src.app.celery
      - worker
      - --loglevel=info
    environment:
      - FLASK_APP=src.app
      - FLASK_ENV=${FLASK_ENV}
      - FLASK_RUN_HOST="0.0.0.0"
      - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}
      - SQLALCHEMY_DATABASE_URI_ASYNC=${SQLALCHEMY_DATABASE_URI_ASYNC}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - app_network
    depends_on:
      - redis


  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./conf/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
